//
//  pixel.cpp
//  CUP_COLLECTOR
//
//  Created by Jannik Gade on 28/11/14.
//
//

#include "pixel.h"

/*****************************************************************************************
 *  Constructor
 *****************************************************************************************/
pixel::pixel(int x_value, int y_value){
    x = x_value;
    y = y_value;
}

/*****************************************************************************************
 *  Copy constructor
 *****************************************************************************************/
pixel::pixel(const pixel &p){
    x = p.x;
    y = p.y;
}


/*****************************************************************************************
 *  Operator overload assignment operator
 *****************************************************************************************/
pixel& pixel::operator=(const pixel &p){
    x = p.x;
    y = p.y;
    return *this;
}

/*****************************************************************************************
 *  Operator overload comparison operator
 *****************************************************************************************/
bool operator==(pixel &p1, pixel &p2){
    if (p1.get_x()==p2.get_x()&&p1.get_y()==p2.get_y())
        return true;
    else
        return false;
}

/*****************************************************************************************
 *  Operator overload comparison operator
 *****************************************************************************************/
bool operator!=(pixel &p1, pixel &p2){
    return !(p1==p2);
}

/*****************************************************************************************
 *  Operator overload for making bool test: if (my_pixel_object==true)
 *****************************************************************************************/
pixel::operator bool() const{
    if (x==-1&&y==-1)
        return false;
    else
        return true;
}


/*****************************************************************************************
 *  Tests if pixel is uninitialized
 *****************************************************************************************/
bool pixel::is_uninitialized(void){
    if (x==-1&&y==-1)
        return true;
    else
        return false;
}

/*****************************************************************************************
 *  Set pixel value
 *****************************************************************************************/
void pixel::set_pixel_x_y(int x_value, int y_value){
    x = x_value;
    y = y_value;
}

/*****************************************************************************************
 *  Get pixel x value
 *****************************************************************************************/
int pixel::get_x(void){
    return x;
}

/*****************************************************************************************
 *  Get pixel y value
 *****************************************************************************************/
int pixel::get_y(){
    return y;
}